#!/usr/bin/env node

/**
 * Module dependencies.
 */


var exec = require('child_process').exec
var program = require('commander');
var mkdirp = require('mkdirp');
var pkg = require('../package.json');
var version = pkg.version;
var os = require('os');
var fs = require('fs');
var npath = require('path')
var grunt = require('grunt')

program
  .version(version)
  .option('-s, --sessions', 'add session support')
  .option('-f, --force', 'force on non-empty directory')
  .parse(process.argv);

var path = program.args.shift() || '.';
var eol = 'win32' == os.platform() ? '\r\n' : '\n'
var scaffold_path = npath.join(npath.dirname(fs.realpathSync(__filename)), '../scaffold/app');
var node_modules_path = npath.join(npath.dirname(fs.realpathSync(__filename)), '../');


loadNpmTasks('grunt-contrib', node_modules_path);

grunt.initConfig({
  copy: {
    scaffold: {
      files:[
        {
          dest: path + '/',
          src: "**/*",
          cwd: scaffold_path,
          expand: true
        }
      ]
    }
  }
});

grunt.log.muted = true;
grunt.task.run(['copy:scaffold']);


(function createApp(path) {
  emptyDirectory(path, function(empty){
    if (empty || program.force) {
      console.log('   \033[36mgenerating scaffold\033[0m');
      grunt.task.start();
    } else {
      program.confirm('destination is not empty, continue? ', function(ok){
        if (ok) {
          process.stdin.destroy();
          createAppAt(path);
        } else {
          abort('aborting');
        }
      });
    }
  });
})(path);


function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

var loadTaskDepth = 0;

function loadNpmTasks(name, root_path) {
  loadTasksMessage('"' + name + '" local Npm module');
  var root = npath.resolve(root_path + 'node_modules');
  var pkgfile = npath.join(root, name, 'package.json');
  var pkg = grunt.file.exists(pkgfile) ? grunt.file.readJSON(pkgfile) : {keywords: []};

  // Process collection plugins.
  if (pkg.keywords && pkg.keywords.indexOf('gruntcollection') !== -1) {
    loadTaskDepth++;
    Object.keys(pkg.dependencies).forEach(function(depName) {
      // Npm sometimes pulls dependencies out if they're shared, so find
      // upwards if not found locally.
      var filepath = grunt.file.findup('node_modules/' + depName, {
        cwd: npath.resolve(root_path + 'node_modules', name),
        nocase: true
      });
      if (filepath) {
        // Load this task plugin recursively.
        loadNpmTasks(npath.relative(root, filepath), root_path);
      }
    });
    loadTaskDepth--;
    return;
  }

  // Process task plugins.
  var tasksdir = npath.join(root, name, 'tasks');
  if (grunt.file.exists(tasksdir)) {
    grunt.loadTasks(tasksdir);
  } else {
    grunt.log.error('Local Npm module "' + name + '" not found. Is it installed?');
  }
};

function loadTasksMessage(info) {
  // Only keep track of names of top-level loaded tasks and collections,
  // not sub-tasks.
  if (loadTaskDepth === 0) { lastInfo = info; }
  grunt.verbose.subhead('Registering ' + info + ' tasks.');
}




