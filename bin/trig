#!/usr/bin/env node

/**
 * Module dependencies.
 */


exec = require('child_process').exec
program = require('commander');
mkdirp = require('mkdirp');
pkg = require('../package.json');
version = pkg.version;
os = require('os');
fs = require('fs');
npath = require('path');
grunt = require('grunt');
runner = require('karma').runner;
server = require('karma').server;
jf = require('jsonfile');
AWS = require('aws-sdk');
try {
  trigConfig = grunt.file.readJSON('config.json');
} catch (e) { trigConfig = null }
try {
  bowerConfig = grunt.file.readJSON('bower.json');
} catch (e) { bowerConfig = null }
eol = 'win32' == os.platform() ? '\r\n' : '\n';
base_path = npath.join(npath.dirname(fs.realpathSync(__filename)), '../');
require('../lib/trig');
require('../lib/gruntConfig');
require('../lib/tasks');

process.env.NODE_TLS_REJECT_UNAUTHORIZED = 0;

grunt.initConfig(gruntConfig);

program
  .option('--e2e', 'run edge to edge test suite')

program
  .command('new <path>')
  .description('create a new trig app at the given path')
  .action(function(path){
    trig.newApp(path);
  });

program
  .command('init')
  .description('init a new trig app')
  .action(function() {
    console.log("creating a new app!");
    trig.initApp();
  })

program
  .command('server')
  .description('run the trig app server')
  .action(function(env) {
    trig.runServer(env);
  });

program
  .command('test')
  .description('run the test suite')
  .action(function() {
    console.log('e2e? ' + program.e2e);
    if (program.e2e) {
      grunt.task.run(['env:test', 'stagecopy', 'connect:server', 'karma:e2e']);
    } else {
      grunt.task.run(['env:test', 'stagecopy', 'karma:watch']);
    }

    console.log('\033[36mderiving tests\033[0m');
    grunt.task.start();
  });

program
  .command('clean')
  .description('clean up temporary files')
  .action(function() {
    grunt.task.run(['clean:stage']);
    console.log('\033[36mtidying up!\033[0m');
    grunt.task.start();
  });

program
  .command('generate')
  .description('scaffold generator')
  .action(function(component, name){
    console.log("component: " + component + ", name: " + name);
  });

program
  .command('deploy')
  .description('deploy to a Amazon S3. Add your credentials to config.json')
  .action(function() {

    if (!trigConfig.aws.accessKeyId || !trigConfig.aws.secretAccessKey) {
      console.log('\033[36mAWS credentials missing\033[0m');
      program.prompt('Enter your AWS access key id: ', function(accessKey) {
        trigConfig.aws.accessKeyId = accessKey;
        program.prompt('Enter your AWS secret key: ', function(secretKey) {
          trigConfig.aws.secretAccessKey = secretKey;
          trig.updateConfigFile();
          deploy();
        })
      })
    } else {
      deploy()
    }

    function deploy() {
      grunt.task.run(['build:production', 'createS3BucketWebsite', 's3']);
      console.log('\033[36mdeploying to S3\033[0m');
      grunt.task.start();
    }

  });

program
  .command('build')
  .description('create a build of the app')
  .action(function(type) {
    grunt.task.run(['build:' + type]);
    console.log('\033[36mtriangulating a production build\033[0m');
    grunt.task.start();
  });

program
  .command('deps')
  .description('deps')
  .action(function() {
    grunt.task.run(['installDeps']);
    console.log('\033[36minstalling dependencies\033[0m');
    grunt.task.start();
  })


program
  .version(version)
  .option('-f, --force', 'force on non-empty directory')
  .option('--css', 'use boring old vanilla css (defaults to stylus)')
  .option('-p, --port', 'specify which port to run the server on')
  .parse(process.argv);

process.on( 'SIGINT', function() {
  console.log( "\ntidying up and closing down shop" )
  exec('rm -rf .stage');
  process.exit();
});








